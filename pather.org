* Pather

Pather is a library for pathfinding on a 2D grid.

** Pathfinding info
Pathfinding is a graph search problem. The graph in this case is a grid.

Pathfinding algorithms:

  + Breadth First Search
    - explores equally in all directions
  + Dijkstra's Algorithm (Uniform Cost Search)
    - favors lower cost paths
  + A*
    - optimization of Dijkstra's for single target

** Architecture:

*** Examples:
**** OOP:
     pather::Graph* graph = pather::buildGraph(simple_2D_input_structure)
  
     std::vector<std::pair<int, int>>* path =  pather::find(graph, begin_indices, end_indices)

**** type style:
     pather::grid_t* grid = pather::buildGrid(input)

     pather::path_t* path = pather::find(graph, begin, end)

*** Questions and Answers:
  
  + OOP Graph of Nodes approach or just typedefs and free functions?
    
*** Statements:
  + typedefs and free funcs for now, wrap later if necessary
  + the upside of wrapping in classes is only having to build one good call to construct the nested structures  
  + return raw pointers and let callers traffic in ownership
    - do need to tell them "you own this now" however...

** Data choices:

*** Broad
    necessary data and their encoding:
    + x,y of each node
      - indices of grid_t
    + neighbors of each node
      - generated by function of grid_t
	(easy to change from cardinal to 8-way)

*** Node
    + the structures that fill a grid, contain a difficulty value at least
    + is it even necessary if it's just an int wrapper?
      - figure out what other values it might hold otherwise nix it early

*** Grid
    + 2D grid of nodes
    + what structure is it constructed from?
      - if it just takes in and stores a vector<vector<int>> then why bother with a class

*** Path
    std::vector<std::pair<int, int>>
    + list of indices that compose the found path

*** Map
    std::map? std::unordered_map? // BENCHMARK FOR DECISION says the MJCPL's only book on cpp
    + some sort of associative mapping of nodes to their predecessor
    + if "Node" isn't actually a structure then maybe just a mapping of std::pair<int, int> to std::pair<int, int>?
      - this is nicely general
      - BUT the actual pairs need to compare equal for testing the keys
      - i.e. provide the std::map specialization with an appropriate comparison predicate
    + these maps can be memo'd to save later calculation
      - i.e. std::vector<Map> is a list of all mappings for all points, a path can very easily be grabbed out of it
      - BUT if the difficulty of any node in the grid changes, whole list of Maps needs to be recalc'd

** The header:
#+NAME: header
#+HEADER: :tangle src/pather.hpp :main no
#+BEGIN_SRC cpp
#ifndef PATHER_INCLUDE
#define PATHER_INCLUDE
#include <functional>
#include <map>
#include <memory>
#include <vector>

namespace pather {

  using grid_t = std::vector<std::vector<int>>;
  using map_t = std::map<std::pair<int, int>, std::pair<int, int>>;
  using path_t = std::vector<std::pair<int, int>>;

  std::unique_ptr<grid_t> makeGrid(int w, int h, std::function<int(int, int)> setDifficulty);
  void setEachNode(grid_t& grid, std::function<int(int, int)> nodeFunc);

  path_t* findPath(const map_t& map); 
  map_t* breadthFirst(const grid_t& grid);
  map_t* dijkstras(const grid_t& grid);
}

#endif // PATHER_INCLUDE
#+END_SRC

** The implementation:
#+NAME: implementation
#+HEADER: :tangle src/pather.cpp :main no
#+BEGIN_SRC cpp
#include "pather.hpp"

std::unique_ptr<grid_t> pather::makeGrid(int w, int h, std::function<int(int, int)> setDifficulty) {
  
  std::unique_ptr<grid_t> ugp(new std::vector<vector<int>>(w, std::vector<int>(h)));

  setEachNode(*ugp, setDifficulty);

  return ugp;
}

void pather::setEachNode(grid_t& grid, std::function<int(int, int)> nodeFunc) {

  for(auto x = grid.begin(); x != grid.end(); ++x) {

    for(auto y = x->begin(); y != x->end(); ++y) {

      *y = nodeFunc(x, y);  
    }
  }
}

map_t* pather::breadthFirst(const grid_t& grid) {


}

#+END_SRC

** Tests:

#+NAME: tests
#+HEADER: :tangle src/tests.cpp 
#+HEADER: :flags '("-std=c++14" "-I/home/userprime/src/pather/")
#+BEGIN_SRC cpp
#include <iostream>
#include "pather.hpp"

using namespace pather;

/* Tangle out changes before executing */
int testGrid() {

  auto flatDifficulty = [](int, int) {
    return 1;
  };

  std::unique_ptr<grid_t> ugp = makeGrid(12, 24, flatDifficulty);

  std::cout << "Grid is " << ugp->size() << " elements wide and " <<
                             ugp->at(0).size() << " elements tall.\n";
  
  return 1;
}

int main(int argc, char** argv) {

  testGrid();

  std::cout << "Tests finished.\n";

  return 0;
}
#+END_SRC

#+RESULTS: tests

